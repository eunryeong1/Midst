generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  userId       String         @id @db.VarChar(45)
  name         String         @unique @db.VarChar(20)
  email        String         @db.VarChar(45)
  password     String         @db.VarChar(100)
  withdrawal   Int?           @db.TinyInt
  community    community[]
  diary        diary[]
  refreshtoken refreshtoken?
  reply        reply[]
  usertosearch usertosearch[]
  like         like[]
}

model usertosearch {
  searchId    Int    @id @unique(map: "userToSearch_searchId_key") @default(autoincrement())
  userId      String @db.VarChar(45)
  searchWord  String @db.VarChar(100)
  description String @db.VarChar(1000)
  user        user   @relation(fields: [userId], references: [userId], map: "userToSearch_userId_fkey")

  @@index([userId], map: "userToSearch_userId_fkey")
}

model community {
  id          Int      @id @unique @default(autoincrement())
  author      String   @db.VarChar(45)
  title       String   @db.VarChar(30)
  description String   @db.VarChar(200)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        user     @relation(fields: [author], references: [name])
  reply       reply[]
  like        like[]

  @@index([author], map: "community_userId_fkey")
}

model like {
  id        Int       @id @unique @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      user      @relation(fields: [userId], references: [name])
  community community @relation(fields: [postId], references: [id])
}

model reply {
  id          Int       @id @unique @default(autoincrement())
  author      String    @db.VarChar(45)
  postId      Int
  description String    @db.VarChar(200)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  community   community @relation(fields: [postId], references: [id])
  user        user      @relation(fields: [author], references: [name])

  @@index([postId], map: "reply_postId_fkey")
  @@index([author], map: "reply_userId_fkey")
}

model diary {
  id          Int      @id @unique @default(autoincrement())
  userId      String   @db.VarChar(45)
  date        String
  title       String   @db.VarChar(10)
  description String   @db.VarChar(100)
  emotion     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        user     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "diary_userId_fkey")
}

model refreshtoken {
  userId       String @unique(map: "userId_UNIQUE")
  refreshToken String @db.VarChar(500)
  user         user   @relation(fields: [userId], references: [userId], map: "refreshToken_userId_fkey")
}
